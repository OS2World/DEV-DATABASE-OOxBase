
/*
 * This file was generated by the SOM Compiler.
 * FileName: ooxbase.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.17
 *     SOM Emitter emitxh: 2.47
 */

#ifndef SOM_ooxdbf_xh
#define SOM_ooxdbf_xh

class ooxdbf;

#define ooxdbf_MajorVersion 0
#define ooxdbf_MinorVersion 0

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMObject_xh
#include <somobj.xh>
#endif

#ifndef ooxdbf_API
#define ooxdbf_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class ooxfield;
#define ex_ooxdbf_ooxdbf_error "::ooxdbf::ooxdbf_error"
typedef
struct ooxdbf_ooxdbf_error {
long  ErrCode;
string  Reason;
} ooxdbf_ooxdbf_error;

#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_ex_ooxdbf_error
    #ifdef ex_ooxdbf_error
        #undef ex_ooxdbf_error
        #define SOMTGD_ex_ooxdbf_error 1
    #else
        #define ex_ooxdbf_error ex_ooxdbf_ooxdbf_error
    #endif /* ex_ooxdbf_error */
#endif /* SOMTGD_ex_ooxdbf_error */
#ifndef SOMTGD_ooxdbf_error
    #ifdef ooxdbf_error
        #undef ooxdbf_error
        #define SOMTGD_ooxdbf_error 1
    #else
        #define ooxdbf_error ooxdbf_ooxdbf_error
    #endif /* ooxdbf_error */
#endif /* SOMTGD_ooxdbf_error */
#endif /* SOM_DONT_USE_SHORT_NAMES */

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the ooxdbf Class */
SOMEXTERN SOMClass * SOMLINK ooxdbfNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the ooxdbf class object, and the methods it introduces. */
SOMEXTERN struct ooxdbfClassDataStructure {
	SOMClass *classObject;
	somMToken _get_current_record;
	somMToken _get_record_count;
	somMToken _get_field_count;
	somMToken _get_new_record_size;
	somMToken _set_new_record_size;
	somMToken Open;
	somMToken Read;
	somMToken Write;
	somMToken GoTo;
	somMToken Update;
	somMToken Close;
	somMToken field;
	somMToken field_by_name;
	somMToken reset_index;
	somMToken attach_index;
	somMToken use_index;
	somMToken createindex;
	somMToken buildindex;
	somMToken add_tag;
	somMToken find;
	somMToken reindex;
	somMToken Read_prev;
	somMToken Delete;
	somMToken Undelete;
	somMToken Pack;
	somMToken drop_tag;
	somMToken export;
	somMToken import;
	somMToken sort;
	somMToken usingfilename;
	somMToken defineDBF;
	somMToken defineDBFusing;
	somMToken DBFdefined;
	somMToken _get_deleted;
	somMToken addfld;
	somMToken dropfld;
	somMToken modifyfld;
} SOMDLINK ooxdbfClassData;
#define _ooxdbf ooxdbfClassData.classObject

/* The API to parentMtabs for ooxdbf, and the instance data it introduces. */
SOMEXTERN struct ooxdbfCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK ooxdbfCClassData;

/*
 * -- Typedefs for ooxdbf Method Procedures
 */
SOMEXTERN {
typedef long   SOMLINK somTP_ooxdbf__get_current_record(ooxdbf *somSelf, Environment *ev);
typedef somTP_ooxdbf__get_current_record *somTD_ooxdbf__get_current_record;
typedef long   SOMLINK somTP_ooxdbf__get_record_count(ooxdbf *somSelf, Environment *ev);
typedef somTP_ooxdbf__get_record_count *somTD_ooxdbf__get_record_count;
typedef long   SOMLINK somTP_ooxdbf__get_field_count(ooxdbf *somSelf, Environment *ev);
typedef somTP_ooxdbf__get_field_count *somTD_ooxdbf__get_field_count;
typedef boolean   SOMLINK somTP_ooxdbf__get_deleted(ooxdbf *somSelf, Environment *ev);
typedef somTP_ooxdbf__get_deleted *somTD_ooxdbf__get_deleted;
typedef short   SOMLINK somTP_ooxdbf_Open(ooxdbf *somSelf, Environment *ev, 
		string dbfname);
typedef somTP_ooxdbf_Open *somTD_ooxdbf_Open;
typedef short   SOMLINK somTP_ooxdbf_Read(ooxdbf *somSelf, Environment *ev);
typedef somTP_ooxdbf_Read *somTD_ooxdbf_Read;
typedef short   SOMLINK somTP_ooxdbf_Read_prev(ooxdbf *somSelf, Environment *ev);
typedef somTP_ooxdbf_Read_prev *somTD_ooxdbf_Read_prev;
typedef short   SOMLINK somTP_ooxdbf_Write(ooxdbf *somSelf, Environment *ev);
typedef somTP_ooxdbf_Write *somTD_ooxdbf_Write;
typedef short   SOMLINK somTP_ooxdbf_GoTo(ooxdbf *somSelf, Environment *ev, 
		long recno);
typedef somTP_ooxdbf_GoTo *somTD_ooxdbf_GoTo;
typedef short   SOMLINK somTP_ooxdbf_Update(ooxdbf *somSelf, Environment *ev);
typedef somTP_ooxdbf_Update *somTD_ooxdbf_Update;
typedef short   SOMLINK somTP_ooxdbf_Delete(ooxdbf *somSelf, Environment *ev);
typedef somTP_ooxdbf_Delete *somTD_ooxdbf_Delete;
typedef short   SOMLINK somTP_ooxdbf_Undelete(ooxdbf *somSelf, Environment *ev);
typedef somTP_ooxdbf_Undelete *somTD_ooxdbf_Undelete;
typedef short   SOMLINK somTP_ooxdbf_Pack(ooxdbf *somSelf, Environment *ev);
typedef somTP_ooxdbf_Pack *somTD_ooxdbf_Pack;
typedef short   SOMLINK somTP_ooxdbf_Close(ooxdbf *somSelf, Environment *ev);
typedef somTP_ooxdbf_Close *somTD_ooxdbf_Close;
typedef ooxfield*   SOMLINK somTP_ooxdbf_field(ooxdbf *somSelf, Environment *ev, 
		long i);
typedef somTP_ooxdbf_field *somTD_ooxdbf_field;
typedef ooxfield*   SOMLINK somTP_ooxdbf_field_by_name(ooxdbf *somSelf, Environment *ev, 
		string name);
typedef somTP_ooxdbf_field_by_name *somTD_ooxdbf_field_by_name;
typedef void   SOMLINK somTP_ooxdbf_reset_index(ooxdbf *somSelf, Environment *ev, 
		long from);
typedef somTP_ooxdbf_reset_index *somTD_ooxdbf_reset_index;
typedef short   SOMLINK somTP_ooxdbf_find(ooxdbf *somSelf, Environment *ev, 
		string key);
typedef somTP_ooxdbf_find *somTD_ooxdbf_find;
typedef short   SOMLINK somTP_ooxdbf_reindex(ooxdbf *somSelf, Environment *ev);
typedef somTP_ooxdbf_reindex *somTD_ooxdbf_reindex;
typedef long   SOMLINK somTP_ooxdbf_attach_index(ooxdbf *somSelf, Environment *ev, 
		string ndxdata);
typedef somTP_ooxdbf_attach_index *somTD_ooxdbf_attach_index;
typedef long   SOMLINK somTP_ooxdbf_use_index(ooxdbf *somSelf, Environment *ev, 
		string ndxdata);
typedef somTP_ooxdbf_use_index *somTD_ooxdbf_use_index;
typedef long   SOMLINK somTP_ooxdbf_createindex(ooxdbf *somSelf, Environment *ev, 
		string name, 
		string ndxdata);
typedef somTP_ooxdbf_createindex *somTD_ooxdbf_createindex;
typedef long   SOMLINK somTP_ooxdbf_buildindex(ooxdbf *somSelf, Environment *ev, 
		string ndxdata);
typedef somTP_ooxdbf_buildindex *somTD_ooxdbf_buildindex;
typedef long   SOMLINK somTP_ooxdbf_add_tag(ooxdbf *somSelf, Environment *ev, 
		string ndxdata, 
		string key);
typedef somTP_ooxdbf_add_tag *somTD_ooxdbf_add_tag;
typedef long   SOMLINK somTP_ooxdbf_drop_tag(ooxdbf *somSelf, Environment *ev, 
		string ndxdata);
typedef somTP_ooxdbf_drop_tag *somTD_ooxdbf_drop_tag;
typedef long   SOMLINK somTP_ooxdbf_export(ooxdbf *somSelf, Environment *ev, 
		string filename, 
		char delimiter);
typedef somTP_ooxdbf_export *somTD_ooxdbf_export;
typedef long   SOMLINK somTP_ooxdbf_import(ooxdbf *somSelf, Environment *ev, 
		string filename, 
		char delimiter);
typedef somTP_ooxdbf_import *somTD_ooxdbf_import;
typedef long   SOMLINK somTP_ooxdbf_sort(ooxdbf *somSelf, Environment *ev, 
		string filename, 
		string fields);
typedef somTP_ooxdbf_sort *somTD_ooxdbf_sort;
typedef void   SOMLINK somTP_ooxdbf_usingfilename(ooxdbf *somSelf, Environment *ev, 
		somInitCtrl* ctrl, 
		string Name);
typedef somTP_ooxdbf_usingfilename *somTD_ooxdbf_usingfilename;
typedef void   SOMLINK somTP_ooxdbf_defineDBF(ooxdbf *somSelf, Environment *ev, 
		somInitCtrl* ctrl, 
		string Name, 
		ooxfield* field);
typedef somTP_ooxdbf_defineDBF *somTD_ooxdbf_defineDBF;
typedef void   SOMLINK somTP_ooxdbf_defineDBFusing(ooxdbf *somSelf, Environment *ev, 
		somInitCtrl* ctrl, 
		string Name, 
		ooxdbf* usingDBF);
typedef somTP_ooxdbf_defineDBFusing *somTD_ooxdbf_defineDBFusing;
typedef long   SOMLINK somTP_ooxdbf_DBFdefined(ooxdbf *somSelf, Environment *ev);
typedef somTP_ooxdbf_DBFdefined *somTD_ooxdbf_DBFdefined;
typedef long   SOMLINK somTP_ooxdbf_addfld(ooxdbf *somSelf, Environment *ev, 
		ooxfield* field);
typedef somTP_ooxdbf_addfld *somTD_ooxdbf_addfld;
typedef long   SOMLINK somTP_ooxdbf_dropfld(ooxdbf *somSelf, Environment *ev, 
		ooxfield* field);
typedef somTP_ooxdbf_dropfld *somTD_ooxdbf_dropfld;
typedef long   SOMLINK somTP_ooxdbf_modifyfld(ooxdbf *somSelf, Environment *ev, 
		ooxfield* oldfield, 
		ooxfield* newfield);
typedef somTP_ooxdbf_modifyfld *somTD_ooxdbf_modifyfld;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef void   SOMLINK somTP_ooxdbf_somDefaultInit(ooxdbf *somSelf, 
		som3InitCtrl* ctrl);
typedef somTP_ooxdbf_somDefaultInit *somTD_ooxdbf_somDefaultInit;
typedef void   SOMLINK somTP_ooxdbf_somDestruct(ooxdbf *somSelf, 
		octet doFree, 
		som3DestructCtrl* ctrl);
typedef somTP_ooxdbf_somDestruct *somTD_ooxdbf_somDestruct;
typedef void   SOMLINK somTP_ooxdbf_somDefaultCopyInit(ooxdbf *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ooxdbf_somDefaultCopyInit *somTD_ooxdbf_somDefaultCopyInit;
typedef ooxdbf*   SOMLINK somTP_ooxdbf_somDefaultAssign(ooxdbf *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ooxdbf_somDefaultAssign *somTD_ooxdbf_somDefaultAssign;
typedef void   SOMLINK somTP_ooxdbf_somDefaultConstCopyInit(ooxdbf *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ooxdbf_somDefaultConstCopyInit *somTD_ooxdbf_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_ooxdbf_somDefaultVCopyInit(ooxdbf *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ooxdbf_somDefaultVCopyInit *somTD_ooxdbf_somDefaultVCopyInit;
typedef void   SOMLINK somTP_ooxdbf_somDefaultConstVCopyInit(ooxdbf *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ooxdbf_somDefaultConstVCopyInit *somTD_ooxdbf_somDefaultConstVCopyInit;
typedef ooxdbf*   SOMLINK somTP_ooxdbf_somDefaultConstAssign(ooxdbf *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ooxdbf_somDefaultConstAssign *somTD_ooxdbf_somDefaultConstAssign;
typedef ooxdbf*   SOMLINK somTP_ooxdbf_somDefaultVAssign(ooxdbf *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ooxdbf_somDefaultVAssign *somTD_ooxdbf_somDefaultVAssign;
typedef ooxdbf*   SOMLINK somTP_ooxdbf_somDefaultConstVAssign(ooxdbf *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ooxdbf_somDefaultConstVAssign *somTD_ooxdbf_somDefaultConstVAssign;
typedef void   SOMLINK somTP_ooxdbf_somInit(ooxdbf *somSelf);
typedef somTP_ooxdbf_somInit *somTD_ooxdbf_somInit;
typedef void   SOMLINK somTP_ooxdbf_somFree(ooxdbf *somSelf);
typedef somTP_ooxdbf_somFree *somTD_ooxdbf_somFree;
typedef void   SOMLINK somTP_ooxdbf_somUninit(ooxdbf *somSelf);
typedef somTP_ooxdbf_somUninit *somTD_ooxdbf_somUninit;
typedef SOMClass*   SOMLINK somTP_ooxdbf_somGetClass(ooxdbf *somSelf);
typedef somTP_ooxdbf_somGetClass *somTD_ooxdbf_somGetClass;
typedef string   SOMLINK somTP_ooxdbf_somGetClassName(ooxdbf *somSelf);
typedef somTP_ooxdbf_somGetClassName *somTD_ooxdbf_somGetClassName;
typedef long   SOMLINK somTP_ooxdbf_somGetSize(ooxdbf *somSelf);
typedef somTP_ooxdbf_somGetSize *somTD_ooxdbf_somGetSize;
typedef boolean   SOMLINK somTP_ooxdbf_somIsA(ooxdbf *somSelf, 
		SOMClass* aClassObj);
typedef somTP_ooxdbf_somIsA *somTD_ooxdbf_somIsA;
typedef boolean   SOMLINK somTP_ooxdbf_somIsInstanceOf(ooxdbf *somSelf, 
		SOMClass* aClassObj);
typedef somTP_ooxdbf_somIsInstanceOf *somTD_ooxdbf_somIsInstanceOf;
typedef boolean   SOMLINK somTP_ooxdbf_somRespondsTo(ooxdbf *somSelf, 
		somId mId);
typedef somTP_ooxdbf_somRespondsTo *somTD_ooxdbf_somRespondsTo;
typedef boolean   SOMLINK somTP_ooxdbf_somDispatch(ooxdbf *somSelf, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_ooxdbf_somDispatch *somTD_ooxdbf_somDispatch;
typedef boolean   SOMLINK somTP_ooxdbf_somClassDispatch(ooxdbf *somSelf, 
		SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_ooxdbf_somClassDispatch *somTD_ooxdbf_somClassDispatch;
typedef boolean   SOMLINK somTP_ooxdbf_somCastObj(ooxdbf *somSelf, 
		SOMClass* cls);
typedef somTP_ooxdbf_somCastObj *somTD_ooxdbf_somCastObj;
typedef boolean   SOMLINK somTP_ooxdbf_somResetObj(ooxdbf *somSelf);
typedef somTP_ooxdbf_somResetObj *somTD_ooxdbf_somResetObj;
typedef void   SOMLINK somTP_ooxdbf_somDispatchV(ooxdbf *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_ooxdbf_somDispatchV *somTD_ooxdbf_somDispatchV;
typedef long   SOMLINK somTP_ooxdbf_somDispatchL(ooxdbf *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_ooxdbf_somDispatchL *somTD_ooxdbf_somDispatchL;
typedef void*   SOMLINK somTP_ooxdbf_somDispatchA(ooxdbf *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_ooxdbf_somDispatchA *somTD_ooxdbf_somDispatchA;
typedef double   SOMLINK somTP_ooxdbf_somDispatchD(ooxdbf *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_ooxdbf_somDispatchD *somTD_ooxdbf_somDispatchD;
typedef SOMObject*   SOMLINK somTP_ooxdbf_somPrintSelf(ooxdbf *somSelf);
typedef somTP_ooxdbf_somPrintSelf *somTD_ooxdbf_somPrintSelf;
typedef void   SOMLINK somTP_ooxdbf_somDumpSelf(ooxdbf *somSelf, 
		long level);
typedef somTP_ooxdbf_somDumpSelf *somTD_ooxdbf_somDumpSelf;
typedef void   SOMLINK somTP_ooxdbf_somDumpSelfInt(ooxdbf *somSelf, 
		long level);
typedef somTP_ooxdbf_somDumpSelfInt *somTD_ooxdbf_somDumpSelfInt;
}

#endif /* ooxdbf_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for ooxdbf
 */
class ooxdbf : public SOMObject
{
public:

// ooxdbf::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_ooxdbf) ooxdbfNewClass(ooxdbf_MajorVersion,ooxdbf_MinorVersion);
   return (void*)
      SOM_Resolve(_ooxdbf,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_ooxdbf));
}

// ooxdbf::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somFree)
         ((SOMObject*)obj);
   }
}

ooxdbf& operator=(ooxdbf& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

ooxdbf()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ooxdbfCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

ooxdbf(ooxdbf* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ooxdbfCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

#ifdef __IBMCPP__
#pragma info(nocnv,nopar)
#endif
ooxdbf(const ooxdbf* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ooxdbfCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}
#ifdef __IBMCPP__
#pragma info(restore)
#endif

ooxdbf(Environment *ev,string Name) 
{
   usingfilename(ev,0,Name);
}

ooxdbf(Environment *ev,string Name,ooxfield* field) 
{
   defineDBF(ev,0,Name,field);
}

ooxdbf(Environment *ev,string Name,ooxdbf* usingDBF) 
{
   defineDBFusing(ev,0,Name,usingDBF);
}


/* method: _get_current_record */
long   _get_current_record(Environment *ev)
{
/*
 * Method from the IDL attribute statement:
 * "readonly attribute long current_record"
 */
   return SOM_ResolveD(this,ooxdbf,ooxdbf,_get_current_record)
	(this, ev);
}


/* method: _get_record_count */
long   _get_record_count(Environment *ev)
{
/*
 * Method from the IDL attribute statement:
 * "readonly attribute long record_count"
 */
   return SOM_ResolveD(this,ooxdbf,ooxdbf,_get_record_count)
	(this, ev);
}


/* method: _get_field_count */
long   _get_field_count(Environment *ev)
{
/*
 * Method from the IDL attribute statement:
 * "readonly attribute long field_count"
 */
   return SOM_ResolveD(this,ooxdbf,ooxdbf,_get_field_count)
	(this, ev);
}


/* method: _get_deleted */
boolean   _get_deleted(Environment *ev)
{
/*
 * Method from the IDL attribute statement:
 * "readonly attribute boolean deleted"
 */
   return SOM_ResolveD(this,ooxdbf,ooxdbf,_get_deleted)
	(this, ev);
}


/* method: Open */
short   Open(Environment *ev, 
		string dbfname)
{
   return SOM_ResolveD(this,ooxdbf,ooxdbf,Open)
	(this, ev,dbfname);
}


/* method: Read */
short   Read(Environment *ev)
{
   return SOM_ResolveD(this,ooxdbf,ooxdbf,Read)
	(this, ev);
}


/* method: Read_prev */
short   Read_prev(Environment *ev)
{
   return SOM_ResolveD(this,ooxdbf,ooxdbf,Read_prev)
	(this, ev);
}


/* method: Write */
short   Write(Environment *ev)
{
   return SOM_ResolveD(this,ooxdbf,ooxdbf,Write)
	(this, ev);
}


/* method: GoTo */
short   GoTo(Environment *ev, 
		long recno)
{
   return SOM_ResolveD(this,ooxdbf,ooxdbf,GoTo)
	(this, ev,recno);
}


/* method: Update */
short   Update(Environment *ev)
{
   return SOM_ResolveD(this,ooxdbf,ooxdbf,Update)
	(this, ev);
}


/* method: Delete */
short   Delete(Environment *ev)
{
   return SOM_ResolveD(this,ooxdbf,ooxdbf,Delete)
	(this, ev);
}


/* method: Undelete */
short   Undelete(Environment *ev)
{
   return SOM_ResolveD(this,ooxdbf,ooxdbf,Undelete)
	(this, ev);
}


/* method: Pack */
short   Pack(Environment *ev)
{
   return SOM_ResolveD(this,ooxdbf,ooxdbf,Pack)
	(this, ev);
}


/* method: Close */
short   Close(Environment *ev)
{
   return SOM_ResolveD(this,ooxdbf,ooxdbf,Close)
	(this, ev);
}


/* method: field */
ooxfield*   field(Environment *ev, 
		long i)
{
   return SOM_ResolveD(this,ooxdbf,ooxdbf,field)
	(this, ev,i);
}


/* method: field_by_name */
ooxfield*   field_by_name(Environment *ev, 
		string name)
{
   return SOM_ResolveD(this,ooxdbf,ooxdbf,field_by_name)
	(this, ev,name);
}


/* method: reset_index */
void   reset_index(Environment *ev, 
		long from)
{
   SOM_ResolveD(this,ooxdbf,ooxdbf,reset_index)
	(this, ev,from);
}


/* method: find */
short   find(Environment *ev, 
		string key)
{
   return SOM_ResolveD(this,ooxdbf,ooxdbf,find)
	(this, ev,key);
}


/* method: reindex */
short   reindex(Environment *ev)
{
   return SOM_ResolveD(this,ooxdbf,ooxdbf,reindex)
	(this, ev);
}


/* method: attach_index */
long   attach_index(Environment *ev, 
		string ndxdata)
{
   return SOM_ResolveD(this,ooxdbf,ooxdbf,attach_index)
	(this, ev,ndxdata);
}


/* method: use_index */
long   use_index(Environment *ev, 
		string ndxdata)
{
   return SOM_ResolveD(this,ooxdbf,ooxdbf,use_index)
	(this, ev,ndxdata);
}


/* method: createindex */
long   createindex(Environment *ev, 
		string name, 
		string ndxdata)
{
   return SOM_ResolveD(this,ooxdbf,ooxdbf,createindex)
	(this, ev,name,ndxdata);
}


/* method: buildindex */
long   buildindex(Environment *ev, 
		string ndxdata)
{
   return SOM_ResolveD(this,ooxdbf,ooxdbf,buildindex)
	(this, ev,ndxdata);
}


/* method: add_tag */
long   add_tag(Environment *ev, 
		string ndxdata, 
		string key)
{
   return SOM_ResolveD(this,ooxdbf,ooxdbf,add_tag)
	(this, ev,ndxdata,key);
}


/* method: drop_tag */
long   drop_tag(Environment *ev, 
		string ndxdata)
{
   return SOM_ResolveD(this,ooxdbf,ooxdbf,drop_tag)
	(this, ev,ndxdata);
}


/* method: export */
long   export(Environment *ev, 
		string filename, 
		char delimiter)
{
   return SOM_ResolveD(this,ooxdbf,ooxdbf,export)
	(this, ev,filename,delimiter);
}


/* method: import */
long   import(Environment *ev, 
		string filename, 
		char delimiter)
{
   return SOM_ResolveD(this,ooxdbf,ooxdbf,import)
	(this, ev,filename,delimiter);
}


/* method: sort */
long   sort(Environment *ev, 
		string filename, 
		string fields)
{
   return SOM_ResolveD(this,ooxdbf,ooxdbf,sort)
	(this, ev,filename,fields);
}


/* initializer method: usingfilename */
void   usingfilename(Environment *ev, 
		somInitCtrl* ctrl, 
		string Name)
{
   SOM_ResolveD(this,ooxdbf,ooxdbf,usingfilename)
	(this, ev,ctrl,Name);
}


/* initializer method: defineDBF */
void   defineDBF(Environment *ev, 
		somInitCtrl* ctrl, 
		string Name, 
		ooxfield* field)
{
   SOM_ResolveD(this,ooxdbf,ooxdbf,defineDBF)
	(this, ev,ctrl,Name,field);
}


/* initializer method: defineDBFusing */
void   defineDBFusing(Environment *ev, 
		somInitCtrl* ctrl, 
		string Name, 
		ooxdbf* usingDBF)
{
   SOM_ResolveD(this,ooxdbf,ooxdbf,defineDBFusing)
	(this, ev,ctrl,Name,usingDBF);
}


/* method: DBFdefined */
long   DBFdefined(Environment *ev)
{
   return SOM_ResolveD(this,ooxdbf,ooxdbf,DBFdefined)
	(this, ev);
}


/* method: addfld */
long   addfld(Environment *ev, 
		ooxfield* field)
{
   return SOM_ResolveD(this,ooxdbf,ooxdbf,addfld)
	(this, ev,field);
}


/* method: dropfld */
long   dropfld(Environment *ev, 
		ooxfield* field)
{
   return SOM_ResolveD(this,ooxdbf,ooxdbf,dropfld)
	(this, ev,field);
}


/* method: modifyfld */
long   modifyfld(Environment *ev, 
		ooxfield* oldfield, 
		ooxfield* newfield)
{
   return SOM_ResolveD(this,ooxdbf,ooxdbf,modifyfld)
	(this, ev,oldfield,newfield);
}


/*
 * Reintroduce inherited methods
 */

/* initializer method: somDefaultInit */
void   somDefaultInit(som3InitCtrl* ctrl)
{
/*
 *  A default initializer for a SOM object. Passing a null ctrl
 *  indicates to the receiver that its class is the class of the
 *  object being initialized, whereby the initializer will determine
 *  an appropriate control structure.
 */
   SOM_ResolveD(this,ooxdbf,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree, 
		som3DestructCtrl* ctrl)
{
/*
 *  The default destructor for a SOM object. A nonzero <doFree>
 *  indicates that the object storage should be freed by the
 *  object's class (via somDeallocate) after uninitialization.
 *  As with somDefaultInit, a null ctrl can be passed.
 */
   SOM_ResolveD(this,ooxdbf,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor. Use this to make copies of objects for
 *  calling methods with "by-value" argument semantics.
 */
   SOM_ResolveD(this,ooxdbf,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
ooxdbf*  somDefaultAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator. Use this to "assign" the state of one
 *  object to another.
 */
   return SOM_ResolveD(this,ooxdbf,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const fromObj.
 */
   SOM_ResolveD(this,ooxdbf,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a volatile fromObj.
 */
   SOM_ResolveD(this,ooxdbf,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const volatile fromObj.
 */
   SOM_ResolveD(this,ooxdbf,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
ooxdbf*  somDefaultConstAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const fromObj.
 */
   return SOM_ResolveD(this,ooxdbf,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
ooxdbf*  somDefaultVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a volatile fromObj.
 */
   return SOM_ResolveD(this,ooxdbf,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
ooxdbf*  somDefaultConstVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const volatile fromObj.
 */
   return SOM_ResolveD(this,ooxdbf,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somInit */
void   somInit()
{
/*
 *  Obsolete but still supported. Override somDefaultInit instead of somInit.
 */
   SOM_ResolveD(this,ooxdbf,SOMObject,somInit)
	(this);
}


/* method: somFree */
void   somFree()
{
/*
 *  Use as directed by framework implementations.
 */
   SOM_ResolveD(this,ooxdbf,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
/*
 *  Obsolete but still supported. Override somDestruct instead of somUninit.
 */
   SOM_ResolveD(this,ooxdbf,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,ooxdbf,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
/*
 *  Return the name of the receiver's class.
 */
   return SOM_ResolveD(this,ooxdbf,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
/*
 *  Return the size of the receiver.
 */
   return SOM_ResolveD(this,ooxdbf,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver responds to methods
 *  introduced by <aClassObj>, and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,ooxdbf,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver is an instance of
 *  <aClassObj> and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,ooxdbf,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
/*
 *  Returns 1 (true) if the indicated method can be invoked
 *  on the receiver and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,ooxdbf,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */

/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
/* the va_list invocation form */
boolean   ooxdbf_somDispatch(somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,ooxdbf,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,ooxdbf,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */

/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
/* the va_list invocation form */
boolean   ooxdbf_somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,ooxdbf,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,ooxdbf,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
/*
 *  cast the receiving object to cls (which must be an ancestor of the
 *  objects true class. Returns true on success.
 */
   return SOM_ResolveD(this,ooxdbf,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
/*
 *  reset an object to its true class. Returns true always.
 */
   return SOM_ResolveD(this,ooxdbf,SOMObject,somResetObj)
	(this);
}


/* va_list method: somDispatchV */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void   ooxdbf_somDispatchV(somId methodId, 
		somId descriptor, 
		va_list ap)
{   SOM_ResolveD(this,ooxdbf,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void   somDispatchV(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   SOM_ResolveD(this,ooxdbf,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
   va_end(ap);
}


/* va_list method: somDispatchL */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
long   ooxdbf_somDispatchL(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,ooxdbf,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
long   somDispatchL(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   long __somResult = 
      SOM_ResolveD(this,ooxdbf,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchA */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void*   ooxdbf_somDispatchA(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,ooxdbf,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void*   somDispatchA(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   void* __somResult = 
      SOM_ResolveD(this,ooxdbf,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchD */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
double   ooxdbf_somDispatchD(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,ooxdbf,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
double   somDispatchD(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   double __somResult = 
      SOM_ResolveD(this,ooxdbf,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
/*
 *  Uses <SOMOutCharRoutine> to write a brief string with identifying
 *  information about this object.  The default implementation just gives
 *  the object's class name and its address in memory.
 *  <self> is returned.
 */
   return SOM_ResolveD(this,ooxdbf,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write a detailed description of this object
 *  and its current state.
 * 
 *  <level> indicates the nesting level for describing compound objects
 *  it must be greater than or equal to zero.  All lines in the
 *  description will be preceeded by <2*level> spaces.
 * 
 *  This routine only actually writes the data that concerns the object
 *  as a whole, such as class, and uses <somDumpSelfInt> to describe
 *  the object's current state.  This approach allows readable
 *  descriptions of compound objects to be constructed.
 * 
 *  Generally it is not necessary to override this method, if it is
 *  overriden it generally must be completely replaced.
 */
   SOM_ResolveD(this,ooxdbf,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write in the current state of this object.
 *  Generally this method will need to be overridden.  When overriding
 *  it, begin by calling the parent class form of this method and then
 *  write in a description of your class's instance data. This will
 *  result in a description of all the object's instance data going
 *  from its root ancestor class to its specific class.
 */
   SOM_ResolveD(this,ooxdbf,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* ooxdbf */



#endif       /* SOM_ooxdbf_xh */
