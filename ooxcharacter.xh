
/*
 * This file was generated by the SOM Compiler.
 * FileName: ooxcharacter.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.17
 *     SOM Emitter emitxh: 2.47
 */

#ifndef SOM_ooxcharacter_xh
#define SOM_ooxcharacter_xh

class ooxcharacter;

#define ooxcharacter_MajorVersion 0
#define ooxcharacter_MinorVersion 0

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_ooxfield_xh
#include <ooxfield.xh>
#endif

#ifndef ooxcharacter_API
#define ooxcharacter_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
#define ex_ooxcharacter_ooxfield_error "::ooxcharacter::ooxfield_error"
typedef
struct ooxcharacter_ooxfield_error {
long  ErrCode;
string  Reason;
} ooxcharacter_ooxfield_error;

#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_ex_ooxfield_error
    #ifdef ex_ooxfield_error
        #undef ex_ooxfield_error
        #define SOMTGD_ex_ooxfield_error 1
    #else
        #define ex_ooxfield_error ex_ooxcharacter_ooxfield_error
    #endif /* ex_ooxfield_error */
#endif /* SOMTGD_ex_ooxfield_error */
#ifndef SOMTGD_ooxfield_error
    #ifdef ooxfield_error
        #undef ooxfield_error
        #define SOMTGD_ooxfield_error 1
    #else
        #define ooxfield_error ooxcharacter_ooxfield_error
    #endif /* ooxfield_error */
#endif /* SOMTGD_ooxfield_error */
#endif /* SOM_DONT_USE_SHORT_NAMES */

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the ooxcharacter Class */
SOMEXTERN SOMClass * SOMLINK ooxcharacterNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the ooxcharacter class object, and the methods it introduces. */
SOMEXTERN struct ooxcharacterClassDataStructure {
	SOMClass *classObject;
	somMToken define;
} SOMDLINK ooxcharacterClassData;
#define _ooxcharacter ooxcharacterClassData.classObject

/* The API to parentMtabs for ooxcharacter, and the instance data it introduces. */
SOMEXTERN struct ooxcharacterCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK ooxcharacterCClassData;

/*
 * -- Typedefs for ooxcharacter Method Procedures
 */
SOMEXTERN {
typedef void   SOMLINK somTP_ooxcharacter_define(ooxcharacter *somSelf, Environment *ev, 
		somInitCtrl* ctrl, 
		string name, 
		short length);
typedef somTP_ooxcharacter_define *somTD_ooxcharacter_define;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef string   SOMLINK somTP_ooxcharacter_get_name(ooxcharacter *somSelf, Environment *ev);
typedef somTP_ooxcharacter_get_name *somTD_ooxcharacter_get_name;
typedef string   SOMLINK somTP_ooxcharacter_get(ooxcharacter *somSelf, Environment *ev);
typedef somTP_ooxcharacter_get *somTD_ooxcharacter_get;
typedef long   SOMLINK somTP_ooxcharacter_put(ooxcharacter *somSelf, Environment *ev, 
		string datum);
typedef somTP_ooxcharacter_put *somTD_ooxcharacter_put;
typedef char   SOMLINK somTP_ooxcharacter_get_type(ooxcharacter *somSelf, Environment *ev);
typedef somTP_ooxcharacter_get_type *somTD_ooxcharacter_get_type;
typedef short   SOMLINK somTP_ooxcharacter_get_length(ooxcharacter *somSelf, Environment *ev);
typedef somTP_ooxcharacter_get_length *somTD_ooxcharacter_get_length;
typedef short   SOMLINK somTP_ooxcharacter_get_dec_point(ooxcharacter *somSelf, Environment *ev);
typedef somTP_ooxcharacter_get_dec_point *somTD_ooxcharacter_get_dec_point;
typedef void   SOMLINK somTP_ooxcharacter_somDefaultInit(ooxcharacter *somSelf, 
		som3InitCtrl* ctrl);
typedef somTP_ooxcharacter_somDefaultInit *somTD_ooxcharacter_somDefaultInit;
typedef void   SOMLINK somTP_ooxcharacter_somUninit(ooxcharacter *somSelf);
typedef somTP_ooxcharacter_somUninit *somTD_ooxcharacter_somUninit;
typedef void   SOMLINK somTP_ooxcharacter_somDestruct(ooxcharacter *somSelf, 
		octet doFree, 
		som3DestructCtrl* ctrl);
typedef somTP_ooxcharacter_somDestruct *somTD_ooxcharacter_somDestruct;
typedef void   SOMLINK somTP_ooxcharacter_somDefaultCopyInit(ooxcharacter *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ooxcharacter_somDefaultCopyInit *somTD_ooxcharacter_somDefaultCopyInit;
typedef ooxcharacter*   SOMLINK somTP_ooxcharacter_somDefaultAssign(ooxcharacter *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ooxcharacter_somDefaultAssign *somTD_ooxcharacter_somDefaultAssign;
typedef void   SOMLINK somTP_ooxcharacter_somDefaultConstCopyInit(ooxcharacter *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ooxcharacter_somDefaultConstCopyInit *somTD_ooxcharacter_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_ooxcharacter_somDefaultVCopyInit(ooxcharacter *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ooxcharacter_somDefaultVCopyInit *somTD_ooxcharacter_somDefaultVCopyInit;
typedef void   SOMLINK somTP_ooxcharacter_somDefaultConstVCopyInit(ooxcharacter *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ooxcharacter_somDefaultConstVCopyInit *somTD_ooxcharacter_somDefaultConstVCopyInit;
typedef ooxcharacter*   SOMLINK somTP_ooxcharacter_somDefaultConstAssign(ooxcharacter *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ooxcharacter_somDefaultConstAssign *somTD_ooxcharacter_somDefaultConstAssign;
typedef ooxcharacter*   SOMLINK somTP_ooxcharacter_somDefaultVAssign(ooxcharacter *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ooxcharacter_somDefaultVAssign *somTD_ooxcharacter_somDefaultVAssign;
typedef ooxcharacter*   SOMLINK somTP_ooxcharacter_somDefaultConstVAssign(ooxcharacter *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ooxcharacter_somDefaultConstVAssign *somTD_ooxcharacter_somDefaultConstVAssign;
typedef void   SOMLINK somTP_ooxcharacter_somInit(ooxcharacter *somSelf);
typedef somTP_ooxcharacter_somInit *somTD_ooxcharacter_somInit;
typedef void   SOMLINK somTP_ooxcharacter_somFree(ooxcharacter *somSelf);
typedef somTP_ooxcharacter_somFree *somTD_ooxcharacter_somFree;
typedef SOMClass*   SOMLINK somTP_ooxcharacter_somGetClass(ooxcharacter *somSelf);
typedef somTP_ooxcharacter_somGetClass *somTD_ooxcharacter_somGetClass;
typedef string   SOMLINK somTP_ooxcharacter_somGetClassName(ooxcharacter *somSelf);
typedef somTP_ooxcharacter_somGetClassName *somTD_ooxcharacter_somGetClassName;
typedef long   SOMLINK somTP_ooxcharacter_somGetSize(ooxcharacter *somSelf);
typedef somTP_ooxcharacter_somGetSize *somTD_ooxcharacter_somGetSize;
typedef boolean   SOMLINK somTP_ooxcharacter_somIsA(ooxcharacter *somSelf, 
		SOMClass* aClassObj);
typedef somTP_ooxcharacter_somIsA *somTD_ooxcharacter_somIsA;
typedef boolean   SOMLINK somTP_ooxcharacter_somIsInstanceOf(ooxcharacter *somSelf, 
		SOMClass* aClassObj);
typedef somTP_ooxcharacter_somIsInstanceOf *somTD_ooxcharacter_somIsInstanceOf;
typedef boolean   SOMLINK somTP_ooxcharacter_somRespondsTo(ooxcharacter *somSelf, 
		somId mId);
typedef somTP_ooxcharacter_somRespondsTo *somTD_ooxcharacter_somRespondsTo;
typedef boolean   SOMLINK somTP_ooxcharacter_somDispatch(ooxcharacter *somSelf, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_ooxcharacter_somDispatch *somTD_ooxcharacter_somDispatch;
typedef boolean   SOMLINK somTP_ooxcharacter_somClassDispatch(ooxcharacter *somSelf, 
		SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_ooxcharacter_somClassDispatch *somTD_ooxcharacter_somClassDispatch;
typedef boolean   SOMLINK somTP_ooxcharacter_somCastObj(ooxcharacter *somSelf, 
		SOMClass* cls);
typedef somTP_ooxcharacter_somCastObj *somTD_ooxcharacter_somCastObj;
typedef boolean   SOMLINK somTP_ooxcharacter_somResetObj(ooxcharacter *somSelf);
typedef somTP_ooxcharacter_somResetObj *somTD_ooxcharacter_somResetObj;
typedef void   SOMLINK somTP_ooxcharacter_somDispatchV(ooxcharacter *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_ooxcharacter_somDispatchV *somTD_ooxcharacter_somDispatchV;
typedef long   SOMLINK somTP_ooxcharacter_somDispatchL(ooxcharacter *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_ooxcharacter_somDispatchL *somTD_ooxcharacter_somDispatchL;
typedef void*   SOMLINK somTP_ooxcharacter_somDispatchA(ooxcharacter *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_ooxcharacter_somDispatchA *somTD_ooxcharacter_somDispatchA;
typedef double   SOMLINK somTP_ooxcharacter_somDispatchD(ooxcharacter *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_ooxcharacter_somDispatchD *somTD_ooxcharacter_somDispatchD;
typedef SOMObject*   SOMLINK somTP_ooxcharacter_somPrintSelf(ooxcharacter *somSelf);
typedef somTP_ooxcharacter_somPrintSelf *somTD_ooxcharacter_somPrintSelf;
typedef void   SOMLINK somTP_ooxcharacter_somDumpSelf(ooxcharacter *somSelf, 
		long level);
typedef somTP_ooxcharacter_somDumpSelf *somTD_ooxcharacter_somDumpSelf;
typedef void   SOMLINK somTP_ooxcharacter_somDumpSelfInt(ooxcharacter *somSelf, 
		long level);
typedef somTP_ooxcharacter_somDumpSelfInt *somTD_ooxcharacter_somDumpSelfInt;
}

#endif /* ooxcharacter_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for ooxcharacter
 */
class ooxcharacter : public ooxfield
{
public:

// ooxcharacter::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_ooxcharacter) ooxcharacterNewClass(ooxcharacter_MajorVersion,ooxcharacter_MinorVersion);
   return (void*)
      SOM_Resolve(_ooxcharacter,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_ooxcharacter));
}

// ooxcharacter::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somFree)
         ((SOMObject*)obj);
   }
}

ooxcharacter& operator=(ooxcharacter& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

ooxcharacter()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ooxcharacterCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

ooxcharacter(ooxcharacter* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ooxcharacterCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

#ifdef __IBMCPP__
#pragma info(nocnv,nopar)
#endif
ooxcharacter(const ooxcharacter* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ooxcharacterCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}
#ifdef __IBMCPP__
#pragma info(restore)
#endif

ooxcharacter(Environment *ev,string name,short length) 
{
   define(ev,0,name,length);
}


/* initializer method: define */
void   define(Environment *ev, 
		somInitCtrl* ctrl, 
		string name, 
		short length)
{
   SOM_ResolveD(this,ooxcharacter,ooxcharacter,define)
	(this, ev,ctrl,name,length);
}


/*
 * Reintroduce inherited methods
 */

/* method: get_name */
string   get_name(Environment *ev)
{
   return SOM_ResolveD(this,ooxcharacter,ooxfield,get_name)
	(this, ev);
}


/* method: get */
string   get(Environment *ev)
{
   return SOM_ResolveD(this,ooxcharacter,ooxfield,get)
	(this, ev);
}


/* method: put */
long   put(Environment *ev, 
		string datum)
{
   return SOM_ResolveD(this,ooxcharacter,ooxfield,put)
	(this, ev,datum);
}


/* method: get_type */
char   get_type(Environment *ev)
{
   return SOM_ResolveD(this,ooxcharacter,ooxfield,get_type)
	(this, ev);
}


/* method: get_length */
short   get_length(Environment *ev)
{
   return SOM_ResolveD(this,ooxcharacter,ooxfield,get_length)
	(this, ev);
}


/* method: get_dec_point */
short   get_dec_point(Environment *ev)
{
   return SOM_ResolveD(this,ooxcharacter,ooxfield,get_dec_point)
	(this, ev);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(som3InitCtrl* ctrl)
{
   SOM_ResolveD(this,ooxcharacter,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,ooxcharacter,SOMObject,somUninit)
	(this);
}


/* method: somDestruct */
void   somDestruct(octet doFree, 
		som3DestructCtrl* ctrl)
{
/*
 *  The default destructor for a SOM object. A nonzero <doFree>
 *  indicates that the object storage should be freed by the
 *  object's class (via somDeallocate) after uninitialization.
 *  As with somDefaultInit, a null ctrl can be passed.
 */
   SOM_ResolveD(this,ooxcharacter,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor. Use this to make copies of objects for
 *  calling methods with "by-value" argument semantics.
 */
   SOM_ResolveD(this,ooxcharacter,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
ooxcharacter*  somDefaultAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator. Use this to "assign" the state of one
 *  object to another.
 */
   return SOM_ResolveD(this,ooxcharacter,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const fromObj.
 */
   SOM_ResolveD(this,ooxcharacter,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a volatile fromObj.
 */
   SOM_ResolveD(this,ooxcharacter,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const volatile fromObj.
 */
   SOM_ResolveD(this,ooxcharacter,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
ooxcharacter*  somDefaultConstAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const fromObj.
 */
   return SOM_ResolveD(this,ooxcharacter,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
ooxcharacter*  somDefaultVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a volatile fromObj.
 */
   return SOM_ResolveD(this,ooxcharacter,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
ooxcharacter*  somDefaultConstVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const volatile fromObj.
 */
   return SOM_ResolveD(this,ooxcharacter,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somInit */
void   somInit()
{
/*
 *  Obsolete but still supported. Override somDefaultInit instead of somInit.
 */
   SOM_ResolveD(this,ooxcharacter,SOMObject,somInit)
	(this);
}


/* method: somFree */
void   somFree()
{
/*
 *  Use as directed by framework implementations.
 */
   SOM_ResolveD(this,ooxcharacter,SOMObject,somFree)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,ooxcharacter,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
/*
 *  Return the name of the receiver's class.
 */
   return SOM_ResolveD(this,ooxcharacter,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
/*
 *  Return the size of the receiver.
 */
   return SOM_ResolveD(this,ooxcharacter,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver responds to methods
 *  introduced by <aClassObj>, and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,ooxcharacter,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver is an instance of
 *  <aClassObj> and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,ooxcharacter,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
/*
 *  Returns 1 (true) if the indicated method can be invoked
 *  on the receiver and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,ooxcharacter,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */

/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
/* the va_list invocation form */
boolean   ooxcharacter_somDispatch(somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,ooxcharacter,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,ooxcharacter,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */

/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
/* the va_list invocation form */
boolean   ooxcharacter_somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,ooxcharacter,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,ooxcharacter,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
/*
 *  cast the receiving object to cls (which must be an ancestor of the
 *  objects true class. Returns true on success.
 */
   return SOM_ResolveD(this,ooxcharacter,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
/*
 *  reset an object to its true class. Returns true always.
 */
   return SOM_ResolveD(this,ooxcharacter,SOMObject,somResetObj)
	(this);
}


/* va_list method: somDispatchV */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void   ooxcharacter_somDispatchV(somId methodId, 
		somId descriptor, 
		va_list ap)
{   SOM_ResolveD(this,ooxcharacter,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void   somDispatchV(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   SOM_ResolveD(this,ooxcharacter,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
   va_end(ap);
}


/* va_list method: somDispatchL */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
long   ooxcharacter_somDispatchL(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,ooxcharacter,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
long   somDispatchL(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   long __somResult = 
      SOM_ResolveD(this,ooxcharacter,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchA */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void*   ooxcharacter_somDispatchA(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,ooxcharacter,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void*   somDispatchA(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   void* __somResult = 
      SOM_ResolveD(this,ooxcharacter,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchD */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
double   ooxcharacter_somDispatchD(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,ooxcharacter,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
double   somDispatchD(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   double __somResult = 
      SOM_ResolveD(this,ooxcharacter,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
/*
 *  Uses <SOMOutCharRoutine> to write a brief string with identifying
 *  information about this object.  The default implementation just gives
 *  the object's class name and its address in memory.
 *  <self> is returned.
 */
   return SOM_ResolveD(this,ooxcharacter,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write a detailed description of this object
 *  and its current state.
 * 
 *  <level> indicates the nesting level for describing compound objects
 *  it must be greater than or equal to zero.  All lines in the
 *  description will be preceeded by <2*level> spaces.
 * 
 *  This routine only actually writes the data that concerns the object
 *  as a whole, such as class, and uses <somDumpSelfInt> to describe
 *  the object's current state.  This approach allows readable
 *  descriptions of compound objects to be constructed.
 * 
 *  Generally it is not necessary to override this method, if it is
 *  overriden it generally must be completely replaced.
 */
   SOM_ResolveD(this,ooxcharacter,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write in the current state of this object.
 *  Generally this method will need to be overridden.  When overriding
 *  it, begin by calling the parent class form of this method and then
 *  write in a description of your class's instance data. This will
 *  result in a description of all the object's instance data going
 *  from its root ancestor class to its specific class.
 */
   SOM_ResolveD(this,ooxcharacter,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* ooxcharacter */



#endif       /* SOM_ooxcharacter_xh */
