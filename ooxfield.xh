
/*
 * This file was generated by the SOM Compiler.
 * FileName: ooxfield.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.17
 *     SOM Emitter emitxh: 2.47
 */

#ifndef SOM_ooxfield_xh
#define SOM_ooxfield_xh

class ooxfield;

#define ooxfield_MajorVersion 0
#define ooxfield_MinorVersion 0

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMObject_xh
#include <somobj.xh>
#endif

#ifndef ooxfield_API
#define ooxfield_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
#define ex_ooxfield_ooxfield_error "::ooxfield::ooxfield_error"
typedef
struct ooxfield_ooxfield_error {
long  ErrCode;
string  Reason;
} ooxfield_ooxfield_error;

#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_ex_ooxfield_error
    #ifdef ex_ooxfield_error
        #undef ex_ooxfield_error
        #define SOMTGD_ex_ooxfield_error 1
    #else
        #define ex_ooxfield_error ex_ooxfield_ooxfield_error
    #endif /* ex_ooxfield_error */
#endif /* SOMTGD_ex_ooxfield_error */
#ifndef SOMTGD_ooxfield_error
    #ifdef ooxfield_error
        #undef ooxfield_error
        #define SOMTGD_ooxfield_error 1
    #else
        #define ooxfield_error ooxfield_ooxfield_error
    #endif /* ooxfield_error */
#endif /* SOMTGD_ooxfield_error */
#endif /* SOM_DONT_USE_SHORT_NAMES */

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the ooxfield Class */
SOMEXTERN SOMClass * SOMLINK ooxfieldNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the ooxfield class object, and the methods it introduces. */
SOMEXTERN struct ooxfieldClassDataStructure {
	SOMClass *classObject;
	somMToken get_type;
	somMToken get_length;
	somMToken get_dec_point;
	somMToken get_name;
	somMToken get;
	somMToken put;
} SOMDLINK ooxfieldClassData;
#define _ooxfield ooxfieldClassData.classObject

/* The API to parentMtabs for ooxfield, and the instance data it introduces. */
SOMEXTERN struct ooxfieldCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK ooxfieldCClassData;

/*
 * -- Typedefs for ooxfield Method Procedures
 */
SOMEXTERN {
typedef string   SOMLINK somTP_ooxfield_get_name(ooxfield *somSelf, Environment *ev);
typedef somTP_ooxfield_get_name *somTD_ooxfield_get_name;
typedef string   SOMLINK somTP_ooxfield_get(ooxfield *somSelf, Environment *ev);
typedef somTP_ooxfield_get *somTD_ooxfield_get;
typedef long   SOMLINK somTP_ooxfield_put(ooxfield *somSelf, Environment *ev, 
		string datum);
typedef somTP_ooxfield_put *somTD_ooxfield_put;
typedef char   SOMLINK somTP_ooxfield_get_type(ooxfield *somSelf, Environment *ev);
typedef somTP_ooxfield_get_type *somTD_ooxfield_get_type;
typedef short   SOMLINK somTP_ooxfield_get_length(ooxfield *somSelf, Environment *ev);
typedef somTP_ooxfield_get_length *somTD_ooxfield_get_length;
typedef short   SOMLINK somTP_ooxfield_get_dec_point(ooxfield *somSelf, Environment *ev);
typedef somTP_ooxfield_get_dec_point *somTD_ooxfield_get_dec_point;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef void   SOMLINK somTP_ooxfield_somDefaultInit(ooxfield *somSelf, 
		som3InitCtrl* ctrl);
typedef somTP_ooxfield_somDefaultInit *somTD_ooxfield_somDefaultInit;
typedef void   SOMLINK somTP_ooxfield_somDestruct(ooxfield *somSelf, 
		octet doFree, 
		som3DestructCtrl* ctrl);
typedef somTP_ooxfield_somDestruct *somTD_ooxfield_somDestruct;
typedef void   SOMLINK somTP_ooxfield_somDefaultCopyInit(ooxfield *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ooxfield_somDefaultCopyInit *somTD_ooxfield_somDefaultCopyInit;
typedef ooxfield*   SOMLINK somTP_ooxfield_somDefaultAssign(ooxfield *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ooxfield_somDefaultAssign *somTD_ooxfield_somDefaultAssign;
typedef void   SOMLINK somTP_ooxfield_somDefaultConstCopyInit(ooxfield *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ooxfield_somDefaultConstCopyInit *somTD_ooxfield_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_ooxfield_somDefaultVCopyInit(ooxfield *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ooxfield_somDefaultVCopyInit *somTD_ooxfield_somDefaultVCopyInit;
typedef void   SOMLINK somTP_ooxfield_somDefaultConstVCopyInit(ooxfield *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ooxfield_somDefaultConstVCopyInit *somTD_ooxfield_somDefaultConstVCopyInit;
typedef ooxfield*   SOMLINK somTP_ooxfield_somDefaultConstAssign(ooxfield *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ooxfield_somDefaultConstAssign *somTD_ooxfield_somDefaultConstAssign;
typedef ooxfield*   SOMLINK somTP_ooxfield_somDefaultVAssign(ooxfield *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ooxfield_somDefaultVAssign *somTD_ooxfield_somDefaultVAssign;
typedef ooxfield*   SOMLINK somTP_ooxfield_somDefaultConstVAssign(ooxfield *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ooxfield_somDefaultConstVAssign *somTD_ooxfield_somDefaultConstVAssign;
typedef void   SOMLINK somTP_ooxfield_somInit(ooxfield *somSelf);
typedef somTP_ooxfield_somInit *somTD_ooxfield_somInit;
typedef void   SOMLINK somTP_ooxfield_somFree(ooxfield *somSelf);
typedef somTP_ooxfield_somFree *somTD_ooxfield_somFree;
typedef void   SOMLINK somTP_ooxfield_somUninit(ooxfield *somSelf);
typedef somTP_ooxfield_somUninit *somTD_ooxfield_somUninit;
typedef SOMClass*   SOMLINK somTP_ooxfield_somGetClass(ooxfield *somSelf);
typedef somTP_ooxfield_somGetClass *somTD_ooxfield_somGetClass;
typedef string   SOMLINK somTP_ooxfield_somGetClassName(ooxfield *somSelf);
typedef somTP_ooxfield_somGetClassName *somTD_ooxfield_somGetClassName;
typedef long   SOMLINK somTP_ooxfield_somGetSize(ooxfield *somSelf);
typedef somTP_ooxfield_somGetSize *somTD_ooxfield_somGetSize;
typedef boolean   SOMLINK somTP_ooxfield_somIsA(ooxfield *somSelf, 
		SOMClass* aClassObj);
typedef somTP_ooxfield_somIsA *somTD_ooxfield_somIsA;
typedef boolean   SOMLINK somTP_ooxfield_somIsInstanceOf(ooxfield *somSelf, 
		SOMClass* aClassObj);
typedef somTP_ooxfield_somIsInstanceOf *somTD_ooxfield_somIsInstanceOf;
typedef boolean   SOMLINK somTP_ooxfield_somRespondsTo(ooxfield *somSelf, 
		somId mId);
typedef somTP_ooxfield_somRespondsTo *somTD_ooxfield_somRespondsTo;
typedef boolean   SOMLINK somTP_ooxfield_somDispatch(ooxfield *somSelf, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_ooxfield_somDispatch *somTD_ooxfield_somDispatch;
typedef boolean   SOMLINK somTP_ooxfield_somClassDispatch(ooxfield *somSelf, 
		SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_ooxfield_somClassDispatch *somTD_ooxfield_somClassDispatch;
typedef boolean   SOMLINK somTP_ooxfield_somCastObj(ooxfield *somSelf, 
		SOMClass* cls);
typedef somTP_ooxfield_somCastObj *somTD_ooxfield_somCastObj;
typedef boolean   SOMLINK somTP_ooxfield_somResetObj(ooxfield *somSelf);
typedef somTP_ooxfield_somResetObj *somTD_ooxfield_somResetObj;
typedef void   SOMLINK somTP_ooxfield_somDispatchV(ooxfield *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_ooxfield_somDispatchV *somTD_ooxfield_somDispatchV;
typedef long   SOMLINK somTP_ooxfield_somDispatchL(ooxfield *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_ooxfield_somDispatchL *somTD_ooxfield_somDispatchL;
typedef void*   SOMLINK somTP_ooxfield_somDispatchA(ooxfield *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_ooxfield_somDispatchA *somTD_ooxfield_somDispatchA;
typedef double   SOMLINK somTP_ooxfield_somDispatchD(ooxfield *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_ooxfield_somDispatchD *somTD_ooxfield_somDispatchD;
typedef SOMObject*   SOMLINK somTP_ooxfield_somPrintSelf(ooxfield *somSelf);
typedef somTP_ooxfield_somPrintSelf *somTD_ooxfield_somPrintSelf;
typedef void   SOMLINK somTP_ooxfield_somDumpSelf(ooxfield *somSelf, 
		long level);
typedef somTP_ooxfield_somDumpSelf *somTD_ooxfield_somDumpSelf;
typedef void   SOMLINK somTP_ooxfield_somDumpSelfInt(ooxfield *somSelf, 
		long level);
typedef somTP_ooxfield_somDumpSelfInt *somTD_ooxfield_somDumpSelfInt;
}

#endif /* ooxfield_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for ooxfield
 */
class ooxfield : public SOMObject
{
public:

// ooxfield::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_ooxfield) ooxfieldNewClass(ooxfield_MajorVersion,ooxfield_MinorVersion);
   return (void*)
      SOM_Resolve(_ooxfield,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_ooxfield));
}

// ooxfield::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somFree)
         ((SOMObject*)obj);
   }
}

ooxfield& operator=(ooxfield& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

ooxfield()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ooxfieldCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

ooxfield(ooxfield* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ooxfieldCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

#ifdef __IBMCPP__
#pragma info(nocnv,nopar)
#endif
ooxfield(const ooxfield* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ooxfieldCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}
#ifdef __IBMCPP__
#pragma info(restore)
#endif


/* method: get_name */
string   get_name(Environment *ev)
{
   return SOM_ResolveD(this,ooxfield,ooxfield,get_name)
	(this, ev);
}


/* method: get */
string   get(Environment *ev)
{
   return SOM_ResolveD(this,ooxfield,ooxfield,get)
	(this, ev);
}


/* method: put */
long   put(Environment *ev, 
		string datum)
{
   return SOM_ResolveD(this,ooxfield,ooxfield,put)
	(this, ev,datum);
}


/* method: get_type */
char   get_type(Environment *ev)
{
   return SOM_ResolveD(this,ooxfield,ooxfield,get_type)
	(this, ev);
}


/* method: get_length */
short   get_length(Environment *ev)
{
   return SOM_ResolveD(this,ooxfield,ooxfield,get_length)
	(this, ev);
}


/* method: get_dec_point */
short   get_dec_point(Environment *ev)
{
   return SOM_ResolveD(this,ooxfield,ooxfield,get_dec_point)
	(this, ev);
}


/*
 * Reintroduce inherited methods
 */

/* initializer method: somDefaultInit */
void   somDefaultInit(som3InitCtrl* ctrl)
{
/*
 *  A default initializer for a SOM object. Passing a null ctrl
 *  indicates to the receiver that its class is the class of the
 *  object being initialized, whereby the initializer will determine
 *  an appropriate control structure.
 */
   SOM_ResolveD(this,ooxfield,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree, 
		som3DestructCtrl* ctrl)
{
/*
 *  The default destructor for a SOM object. A nonzero <doFree>
 *  indicates that the object storage should be freed by the
 *  object's class (via somDeallocate) after uninitialization.
 *  As with somDefaultInit, a null ctrl can be passed.
 */
   SOM_ResolveD(this,ooxfield,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor. Use this to make copies of objects for
 *  calling methods with "by-value" argument semantics.
 */
   SOM_ResolveD(this,ooxfield,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
ooxfield*  somDefaultAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator. Use this to "assign" the state of one
 *  object to another.
 */
   return SOM_ResolveD(this,ooxfield,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const fromObj.
 */
   SOM_ResolveD(this,ooxfield,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a volatile fromObj.
 */
   SOM_ResolveD(this,ooxfield,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const volatile fromObj.
 */
   SOM_ResolveD(this,ooxfield,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
ooxfield*  somDefaultConstAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const fromObj.
 */
   return SOM_ResolveD(this,ooxfield,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
ooxfield*  somDefaultVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a volatile fromObj.
 */
   return SOM_ResolveD(this,ooxfield,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
ooxfield*  somDefaultConstVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const volatile fromObj.
 */
   return SOM_ResolveD(this,ooxfield,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somInit */
void   somInit()
{
/*
 *  Obsolete but still supported. Override somDefaultInit instead of somInit.
 */
   SOM_ResolveD(this,ooxfield,SOMObject,somInit)
	(this);
}


/* method: somFree */
void   somFree()
{
/*
 *  Use as directed by framework implementations.
 */
   SOM_ResolveD(this,ooxfield,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
/*
 *  Obsolete but still supported. Override somDestruct instead of somUninit.
 */
   SOM_ResolveD(this,ooxfield,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,ooxfield,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
/*
 *  Return the name of the receiver's class.
 */
   return SOM_ResolveD(this,ooxfield,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
/*
 *  Return the size of the receiver.
 */
   return SOM_ResolveD(this,ooxfield,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver responds to methods
 *  introduced by <aClassObj>, and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,ooxfield,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver is an instance of
 *  <aClassObj> and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,ooxfield,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
/*
 *  Returns 1 (true) if the indicated method can be invoked
 *  on the receiver and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,ooxfield,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */

/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
/* the va_list invocation form */
boolean   ooxfield_somDispatch(somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,ooxfield,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,ooxfield,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */

/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
/* the va_list invocation form */
boolean   ooxfield_somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,ooxfield,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,ooxfield,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
/*
 *  cast the receiving object to cls (which must be an ancestor of the
 *  objects true class. Returns true on success.
 */
   return SOM_ResolveD(this,ooxfield,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
/*
 *  reset an object to its true class. Returns true always.
 */
   return SOM_ResolveD(this,ooxfield,SOMObject,somResetObj)
	(this);
}


/* va_list method: somDispatchV */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void   ooxfield_somDispatchV(somId methodId, 
		somId descriptor, 
		va_list ap)
{   SOM_ResolveD(this,ooxfield,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void   somDispatchV(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   SOM_ResolveD(this,ooxfield,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
   va_end(ap);
}


/* va_list method: somDispatchL */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
long   ooxfield_somDispatchL(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,ooxfield,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
long   somDispatchL(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   long __somResult = 
      SOM_ResolveD(this,ooxfield,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchA */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void*   ooxfield_somDispatchA(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,ooxfield,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void*   somDispatchA(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   void* __somResult = 
      SOM_ResolveD(this,ooxfield,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchD */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
double   ooxfield_somDispatchD(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,ooxfield,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
double   somDispatchD(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   double __somResult = 
      SOM_ResolveD(this,ooxfield,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
/*
 *  Uses <SOMOutCharRoutine> to write a brief string with identifying
 *  information about this object.  The default implementation just gives
 *  the object's class name and its address in memory.
 *  <self> is returned.
 */
   return SOM_ResolveD(this,ooxfield,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write a detailed description of this object
 *  and its current state.
 * 
 *  <level> indicates the nesting level for describing compound objects
 *  it must be greater than or equal to zero.  All lines in the
 *  description will be preceeded by <2*level> spaces.
 * 
 *  This routine only actually writes the data that concerns the object
 *  as a whole, such as class, and uses <somDumpSelfInt> to describe
 *  the object's current state.  This approach allows readable
 *  descriptions of compound objects to be constructed.
 * 
 *  Generally it is not necessary to override this method, if it is
 *  overriden it generally must be completely replaced.
 */
   SOM_ResolveD(this,ooxfield,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write in the current state of this object.
 *  Generally this method will need to be overridden.  When overriding
 *  it, begin by calling the parent class form of this method and then
 *  write in a description of your class's instance data. This will
 *  result in a description of all the object's instance data going
 *  from its root ancestor class to its specific class.
 */
   SOM_ResolveD(this,ooxfield,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* ooxfield */



#endif       /* SOM_ooxfield_xh */
