
/*
 * This file was generated by the SOM Compiler.
 * FileName: ooxlogical.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.17
 *     SOM Emitter emitxh: 2.47
 */

#ifndef SOM_ooxlogical_xh
#define SOM_ooxlogical_xh

class ooxlogical;

#define ooxlogical_MajorVersion 0
#define ooxlogical_MinorVersion 0

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_ooxfield_xh
#include <ooxfield.xh>
#endif

#ifndef ooxlogical_API
#define ooxlogical_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
#define ex_ooxlogical_ooxfield_error "::ooxlogical::ooxfield_error"
typedef
struct ooxlogical_ooxfield_error {
long  ErrCode;
string  Reason;
} ooxlogical_ooxfield_error;

#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_ex_ooxfield_error
    #ifdef ex_ooxfield_error
        #undef ex_ooxfield_error
        #define SOMTGD_ex_ooxfield_error 1
    #else
        #define ex_ooxfield_error ex_ooxlogical_ooxfield_error
    #endif /* ex_ooxfield_error */
#endif /* SOMTGD_ex_ooxfield_error */
#ifndef SOMTGD_ooxfield_error
    #ifdef ooxfield_error
        #undef ooxfield_error
        #define SOMTGD_ooxfield_error 1
    #else
        #define ooxfield_error ooxlogical_ooxfield_error
    #endif /* ooxfield_error */
#endif /* SOMTGD_ooxfield_error */
#endif /* SOM_DONT_USE_SHORT_NAMES */

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the ooxlogical Class */
SOMEXTERN SOMClass * SOMLINK ooxlogicalNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the ooxlogical class object, and the methods it introduces. */
SOMEXTERN struct ooxlogicalClassDataStructure {
	SOMClass *classObject;
	somMToken define;
	somMToken put_boolean;
	somMToken get_boolean;
} SOMDLINK ooxlogicalClassData;
#define _ooxlogical ooxlogicalClassData.classObject

/* The API to parentMtabs for ooxlogical, and the instance data it introduces. */
SOMEXTERN struct ooxlogicalCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK ooxlogicalCClassData;

/*
 * -- Typedefs for ooxlogical Method Procedures
 */
SOMEXTERN {
typedef void   SOMLINK somTP_ooxlogical_define(ooxlogical *somSelf, Environment *ev, 
		somInitCtrl* ctrl, 
		string name);
typedef somTP_ooxlogical_define *somTD_ooxlogical_define;
typedef void   SOMLINK somTP_ooxlogical_put_boolean(ooxlogical *somSelf, Environment *ev, 
		boolean booleanv);
typedef somTP_ooxlogical_put_boolean *somTD_ooxlogical_put_boolean;
typedef boolean   SOMLINK somTP_ooxlogical_get_boolean(ooxlogical *somSelf, Environment *ev);
typedef somTP_ooxlogical_get_boolean *somTD_ooxlogical_get_boolean;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef string   SOMLINK somTP_ooxlogical_get_name(ooxlogical *somSelf, Environment *ev);
typedef somTP_ooxlogical_get_name *somTD_ooxlogical_get_name;
typedef string   SOMLINK somTP_ooxlogical_get(ooxlogical *somSelf, Environment *ev);
typedef somTP_ooxlogical_get *somTD_ooxlogical_get;
typedef long   SOMLINK somTP_ooxlogical_put(ooxlogical *somSelf, Environment *ev, 
		string datum);
typedef somTP_ooxlogical_put *somTD_ooxlogical_put;
typedef char   SOMLINK somTP_ooxlogical_get_type(ooxlogical *somSelf, Environment *ev);
typedef somTP_ooxlogical_get_type *somTD_ooxlogical_get_type;
typedef short   SOMLINK somTP_ooxlogical_get_length(ooxlogical *somSelf, Environment *ev);
typedef somTP_ooxlogical_get_length *somTD_ooxlogical_get_length;
typedef short   SOMLINK somTP_ooxlogical_get_dec_point(ooxlogical *somSelf, Environment *ev);
typedef somTP_ooxlogical_get_dec_point *somTD_ooxlogical_get_dec_point;
typedef void   SOMLINK somTP_ooxlogical_somDefaultInit(ooxlogical *somSelf, 
		som3InitCtrl* ctrl);
typedef somTP_ooxlogical_somDefaultInit *somTD_ooxlogical_somDefaultInit;
typedef void   SOMLINK somTP_ooxlogical_somUninit(ooxlogical *somSelf);
typedef somTP_ooxlogical_somUninit *somTD_ooxlogical_somUninit;
typedef void   SOMLINK somTP_ooxlogical_somDestruct(ooxlogical *somSelf, 
		octet doFree, 
		som3DestructCtrl* ctrl);
typedef somTP_ooxlogical_somDestruct *somTD_ooxlogical_somDestruct;
typedef void   SOMLINK somTP_ooxlogical_somDefaultCopyInit(ooxlogical *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ooxlogical_somDefaultCopyInit *somTD_ooxlogical_somDefaultCopyInit;
typedef ooxlogical*   SOMLINK somTP_ooxlogical_somDefaultAssign(ooxlogical *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ooxlogical_somDefaultAssign *somTD_ooxlogical_somDefaultAssign;
typedef void   SOMLINK somTP_ooxlogical_somDefaultConstCopyInit(ooxlogical *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ooxlogical_somDefaultConstCopyInit *somTD_ooxlogical_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_ooxlogical_somDefaultVCopyInit(ooxlogical *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ooxlogical_somDefaultVCopyInit *somTD_ooxlogical_somDefaultVCopyInit;
typedef void   SOMLINK somTP_ooxlogical_somDefaultConstVCopyInit(ooxlogical *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ooxlogical_somDefaultConstVCopyInit *somTD_ooxlogical_somDefaultConstVCopyInit;
typedef ooxlogical*   SOMLINK somTP_ooxlogical_somDefaultConstAssign(ooxlogical *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ooxlogical_somDefaultConstAssign *somTD_ooxlogical_somDefaultConstAssign;
typedef ooxlogical*   SOMLINK somTP_ooxlogical_somDefaultVAssign(ooxlogical *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ooxlogical_somDefaultVAssign *somTD_ooxlogical_somDefaultVAssign;
typedef ooxlogical*   SOMLINK somTP_ooxlogical_somDefaultConstVAssign(ooxlogical *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ooxlogical_somDefaultConstVAssign *somTD_ooxlogical_somDefaultConstVAssign;
typedef void   SOMLINK somTP_ooxlogical_somInit(ooxlogical *somSelf);
typedef somTP_ooxlogical_somInit *somTD_ooxlogical_somInit;
typedef void   SOMLINK somTP_ooxlogical_somFree(ooxlogical *somSelf);
typedef somTP_ooxlogical_somFree *somTD_ooxlogical_somFree;
typedef SOMClass*   SOMLINK somTP_ooxlogical_somGetClass(ooxlogical *somSelf);
typedef somTP_ooxlogical_somGetClass *somTD_ooxlogical_somGetClass;
typedef string   SOMLINK somTP_ooxlogical_somGetClassName(ooxlogical *somSelf);
typedef somTP_ooxlogical_somGetClassName *somTD_ooxlogical_somGetClassName;
typedef long   SOMLINK somTP_ooxlogical_somGetSize(ooxlogical *somSelf);
typedef somTP_ooxlogical_somGetSize *somTD_ooxlogical_somGetSize;
typedef boolean   SOMLINK somTP_ooxlogical_somIsA(ooxlogical *somSelf, 
		SOMClass* aClassObj);
typedef somTP_ooxlogical_somIsA *somTD_ooxlogical_somIsA;
typedef boolean   SOMLINK somTP_ooxlogical_somIsInstanceOf(ooxlogical *somSelf, 
		SOMClass* aClassObj);
typedef somTP_ooxlogical_somIsInstanceOf *somTD_ooxlogical_somIsInstanceOf;
typedef boolean   SOMLINK somTP_ooxlogical_somRespondsTo(ooxlogical *somSelf, 
		somId mId);
typedef somTP_ooxlogical_somRespondsTo *somTD_ooxlogical_somRespondsTo;
typedef boolean   SOMLINK somTP_ooxlogical_somDispatch(ooxlogical *somSelf, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_ooxlogical_somDispatch *somTD_ooxlogical_somDispatch;
typedef boolean   SOMLINK somTP_ooxlogical_somClassDispatch(ooxlogical *somSelf, 
		SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_ooxlogical_somClassDispatch *somTD_ooxlogical_somClassDispatch;
typedef boolean   SOMLINK somTP_ooxlogical_somCastObj(ooxlogical *somSelf, 
		SOMClass* cls);
typedef somTP_ooxlogical_somCastObj *somTD_ooxlogical_somCastObj;
typedef boolean   SOMLINK somTP_ooxlogical_somResetObj(ooxlogical *somSelf);
typedef somTP_ooxlogical_somResetObj *somTD_ooxlogical_somResetObj;
typedef void   SOMLINK somTP_ooxlogical_somDispatchV(ooxlogical *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_ooxlogical_somDispatchV *somTD_ooxlogical_somDispatchV;
typedef long   SOMLINK somTP_ooxlogical_somDispatchL(ooxlogical *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_ooxlogical_somDispatchL *somTD_ooxlogical_somDispatchL;
typedef void*   SOMLINK somTP_ooxlogical_somDispatchA(ooxlogical *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_ooxlogical_somDispatchA *somTD_ooxlogical_somDispatchA;
typedef double   SOMLINK somTP_ooxlogical_somDispatchD(ooxlogical *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_ooxlogical_somDispatchD *somTD_ooxlogical_somDispatchD;
typedef SOMObject*   SOMLINK somTP_ooxlogical_somPrintSelf(ooxlogical *somSelf);
typedef somTP_ooxlogical_somPrintSelf *somTD_ooxlogical_somPrintSelf;
typedef void   SOMLINK somTP_ooxlogical_somDumpSelf(ooxlogical *somSelf, 
		long level);
typedef somTP_ooxlogical_somDumpSelf *somTD_ooxlogical_somDumpSelf;
typedef void   SOMLINK somTP_ooxlogical_somDumpSelfInt(ooxlogical *somSelf, 
		long level);
typedef somTP_ooxlogical_somDumpSelfInt *somTD_ooxlogical_somDumpSelfInt;
}

#endif /* ooxlogical_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for ooxlogical
 */
class ooxlogical : public ooxfield
{
public:

// ooxlogical::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_ooxlogical) ooxlogicalNewClass(ooxlogical_MajorVersion,ooxlogical_MinorVersion);
   return (void*)
      SOM_Resolve(_ooxlogical,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_ooxlogical));
}

// ooxlogical::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somFree)
         ((SOMObject*)obj);
   }
}

ooxlogical& operator=(ooxlogical& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

ooxlogical()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ooxlogicalCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

ooxlogical(ooxlogical* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ooxlogicalCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

#ifdef __IBMCPP__
#pragma info(nocnv,nopar)
#endif
ooxlogical(const ooxlogical* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ooxlogicalCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}
#ifdef __IBMCPP__
#pragma info(restore)
#endif

ooxlogical(Environment *ev,string name) 
{
   define(ev,0,name);
}


/* initializer method: define */
void   define(Environment *ev, 
		somInitCtrl* ctrl, 
		string name)
{
   SOM_ResolveD(this,ooxlogical,ooxlogical,define)
	(this, ev,ctrl,name);
}


/* method: put_boolean */
void   put_boolean(Environment *ev, 
		boolean booleanv)
{
   SOM_ResolveD(this,ooxlogical,ooxlogical,put_boolean)
	(this, ev,booleanv);
}


/* method: get_boolean */
boolean   get_boolean(Environment *ev)
{
   return SOM_ResolveD(this,ooxlogical,ooxlogical,get_boolean)
	(this, ev);
}


/*
 * Reintroduce inherited methods
 */

/* method: get_name */
string   get_name(Environment *ev)
{
   return SOM_ResolveD(this,ooxlogical,ooxfield,get_name)
	(this, ev);
}


/* method: get */
string   get(Environment *ev)
{
   return SOM_ResolveD(this,ooxlogical,ooxfield,get)
	(this, ev);
}


/* method: put */
long   put(Environment *ev, 
		string datum)
{
   return SOM_ResolveD(this,ooxlogical,ooxfield,put)
	(this, ev,datum);
}


/* method: get_type */
char   get_type(Environment *ev)
{
   return SOM_ResolveD(this,ooxlogical,ooxfield,get_type)
	(this, ev);
}


/* method: get_length */
short   get_length(Environment *ev)
{
   return SOM_ResolveD(this,ooxlogical,ooxfield,get_length)
	(this, ev);
}


/* method: get_dec_point */
short   get_dec_point(Environment *ev)
{
   return SOM_ResolveD(this,ooxlogical,ooxfield,get_dec_point)
	(this, ev);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(som3InitCtrl* ctrl)
{
   SOM_ResolveD(this,ooxlogical,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,ooxlogical,SOMObject,somUninit)
	(this);
}


/* method: somDestruct */
void   somDestruct(octet doFree, 
		som3DestructCtrl* ctrl)
{
/*
 *  The default destructor for a SOM object. A nonzero <doFree>
 *  indicates that the object storage should be freed by the
 *  object's class (via somDeallocate) after uninitialization.
 *  As with somDefaultInit, a null ctrl can be passed.
 */
   SOM_ResolveD(this,ooxlogical,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor. Use this to make copies of objects for
 *  calling methods with "by-value" argument semantics.
 */
   SOM_ResolveD(this,ooxlogical,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
ooxlogical*  somDefaultAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator. Use this to "assign" the state of one
 *  object to another.
 */
   return SOM_ResolveD(this,ooxlogical,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const fromObj.
 */
   SOM_ResolveD(this,ooxlogical,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a volatile fromObj.
 */
   SOM_ResolveD(this,ooxlogical,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const volatile fromObj.
 */
   SOM_ResolveD(this,ooxlogical,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
ooxlogical*  somDefaultConstAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const fromObj.
 */
   return SOM_ResolveD(this,ooxlogical,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
ooxlogical*  somDefaultVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a volatile fromObj.
 */
   return SOM_ResolveD(this,ooxlogical,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
ooxlogical*  somDefaultConstVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const volatile fromObj.
 */
   return SOM_ResolveD(this,ooxlogical,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somInit */
void   somInit()
{
/*
 *  Obsolete but still supported. Override somDefaultInit instead of somInit.
 */
   SOM_ResolveD(this,ooxlogical,SOMObject,somInit)
	(this);
}


/* method: somFree */
void   somFree()
{
/*
 *  Use as directed by framework implementations.
 */
   SOM_ResolveD(this,ooxlogical,SOMObject,somFree)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,ooxlogical,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
/*
 *  Return the name of the receiver's class.
 */
   return SOM_ResolveD(this,ooxlogical,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
/*
 *  Return the size of the receiver.
 */
   return SOM_ResolveD(this,ooxlogical,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver responds to methods
 *  introduced by <aClassObj>, and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,ooxlogical,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver is an instance of
 *  <aClassObj> and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,ooxlogical,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
/*
 *  Returns 1 (true) if the indicated method can be invoked
 *  on the receiver and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,ooxlogical,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */

/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
/* the va_list invocation form */
boolean   ooxlogical_somDispatch(somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,ooxlogical,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,ooxlogical,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */

/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
/* the va_list invocation form */
boolean   ooxlogical_somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,ooxlogical,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,ooxlogical,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
/*
 *  cast the receiving object to cls (which must be an ancestor of the
 *  objects true class. Returns true on success.
 */
   return SOM_ResolveD(this,ooxlogical,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
/*
 *  reset an object to its true class. Returns true always.
 */
   return SOM_ResolveD(this,ooxlogical,SOMObject,somResetObj)
	(this);
}


/* va_list method: somDispatchV */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void   ooxlogical_somDispatchV(somId methodId, 
		somId descriptor, 
		va_list ap)
{   SOM_ResolveD(this,ooxlogical,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void   somDispatchV(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   SOM_ResolveD(this,ooxlogical,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
   va_end(ap);
}


/* va_list method: somDispatchL */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
long   ooxlogical_somDispatchL(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,ooxlogical,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
long   somDispatchL(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   long __somResult = 
      SOM_ResolveD(this,ooxlogical,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchA */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void*   ooxlogical_somDispatchA(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,ooxlogical,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void*   somDispatchA(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   void* __somResult = 
      SOM_ResolveD(this,ooxlogical,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchD */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
double   ooxlogical_somDispatchD(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,ooxlogical,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
double   somDispatchD(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   double __somResult = 
      SOM_ResolveD(this,ooxlogical,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
/*
 *  Uses <SOMOutCharRoutine> to write a brief string with identifying
 *  information about this object.  The default implementation just gives
 *  the object's class name and its address in memory.
 *  <self> is returned.
 */
   return SOM_ResolveD(this,ooxlogical,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write a detailed description of this object
 *  and its current state.
 * 
 *  <level> indicates the nesting level for describing compound objects
 *  it must be greater than or equal to zero.  All lines in the
 *  description will be preceeded by <2*level> spaces.
 * 
 *  This routine only actually writes the data that concerns the object
 *  as a whole, such as class, and uses <somDumpSelfInt> to describe
 *  the object's current state.  This approach allows readable
 *  descriptions of compound objects to be constructed.
 * 
 *  Generally it is not necessary to override this method, if it is
 *  overriden it generally must be completely replaced.
 */
   SOM_ResolveD(this,ooxlogical,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write in the current state of this object.
 *  Generally this method will need to be overridden.  When overriding
 *  it, begin by calling the parent class form of this method and then
 *  write in a description of your class's instance data. This will
 *  result in a description of all the object's instance data going
 *  from its root ancestor class to its specific class.
 */
   SOM_ResolveD(this,ooxlogical,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* ooxlogical */



#endif       /* SOM_ooxlogical_xh */
