
/*
 * This file was generated by the SOM Compiler.
 * FileName: ooxnumeric.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.17
 *     SOM Emitter emitxh: 2.47
 */

#ifndef SOM_ooxnumeric_xh
#define SOM_ooxnumeric_xh

class ooxnumeric;

#define ooxnumeric_MajorVersion 0
#define ooxnumeric_MinorVersion 0

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_ooxfield_xh
#include <ooxfield.xh>
#endif

#ifndef ooxnumeric_API
#define ooxnumeric_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
#define ex_ooxnumeric_ooxfield_error "::ooxnumeric::ooxfield_error"
typedef
struct ooxnumeric_ooxfield_error {
long  ErrCode;
string  Reason;
} ooxnumeric_ooxfield_error;

#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_ex_ooxfield_error
    #ifdef ex_ooxfield_error
        #undef ex_ooxfield_error
        #define SOMTGD_ex_ooxfield_error 1
    #else
        #define ex_ooxfield_error ex_ooxnumeric_ooxfield_error
    #endif /* ex_ooxfield_error */
#endif /* SOMTGD_ex_ooxfield_error */
#ifndef SOMTGD_ooxfield_error
    #ifdef ooxfield_error
        #undef ooxfield_error
        #define SOMTGD_ooxfield_error 1
    #else
        #define ooxfield_error ooxnumeric_ooxfield_error
    #endif /* ooxfield_error */
#endif /* SOMTGD_ooxfield_error */
#endif /* SOM_DONT_USE_SHORT_NAMES */

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the ooxnumeric Class */
SOMEXTERN SOMClass * SOMLINK ooxnumericNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the ooxnumeric class object, and the methods it introduces. */
SOMEXTERN struct ooxnumericClassDataStructure {
	SOMClass *classObject;
	somMToken define;
	somMToken put_long;
	somMToken put_float;
	somMToken get_long;
	somMToken get_float;
} SOMDLINK ooxnumericClassData;
#define _ooxnumeric ooxnumericClassData.classObject

/* The API to parentMtabs for ooxnumeric, and the instance data it introduces. */
SOMEXTERN struct ooxnumericCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK ooxnumericCClassData;

/*
 * -- Typedefs for ooxnumeric Method Procedures
 */
SOMEXTERN {
typedef void   SOMLINK somTP_ooxnumeric_define(ooxnumeric *somSelf, Environment *ev, 
		somInitCtrl* ctrl, 
		string name, 
		short length, 
		short decimal);
typedef somTP_ooxnumeric_define *somTD_ooxnumeric_define;
typedef void   SOMLINK somTP_ooxnumeric_put_long(ooxnumeric *somSelf, Environment *ev, 
		long longv);
typedef somTP_ooxnumeric_put_long *somTD_ooxnumeric_put_long;
typedef void   SOMLINK somTP_ooxnumeric_put_float(ooxnumeric *somSelf, Environment *ev, 
		float floatv);
typedef somTP_ooxnumeric_put_float *somTD_ooxnumeric_put_float;
typedef long   SOMLINK somTP_ooxnumeric_get_long(ooxnumeric *somSelf, Environment *ev);
typedef somTP_ooxnumeric_get_long *somTD_ooxnumeric_get_long;
typedef float   SOMLINK somTP_ooxnumeric_get_float(ooxnumeric *somSelf, Environment *ev);
typedef somTP_ooxnumeric_get_float *somTD_ooxnumeric_get_float;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef string   SOMLINK somTP_ooxnumeric_get_name(ooxnumeric *somSelf, Environment *ev);
typedef somTP_ooxnumeric_get_name *somTD_ooxnumeric_get_name;
typedef string   SOMLINK somTP_ooxnumeric_get(ooxnumeric *somSelf, Environment *ev);
typedef somTP_ooxnumeric_get *somTD_ooxnumeric_get;
typedef long   SOMLINK somTP_ooxnumeric_put(ooxnumeric *somSelf, Environment *ev, 
		string datum);
typedef somTP_ooxnumeric_put *somTD_ooxnumeric_put;
typedef char   SOMLINK somTP_ooxnumeric_get_type(ooxnumeric *somSelf, Environment *ev);
typedef somTP_ooxnumeric_get_type *somTD_ooxnumeric_get_type;
typedef short   SOMLINK somTP_ooxnumeric_get_length(ooxnumeric *somSelf, Environment *ev);
typedef somTP_ooxnumeric_get_length *somTD_ooxnumeric_get_length;
typedef short   SOMLINK somTP_ooxnumeric_get_dec_point(ooxnumeric *somSelf, Environment *ev);
typedef somTP_ooxnumeric_get_dec_point *somTD_ooxnumeric_get_dec_point;
typedef void   SOMLINK somTP_ooxnumeric_somDefaultInit(ooxnumeric *somSelf, 
		som3InitCtrl* ctrl);
typedef somTP_ooxnumeric_somDefaultInit *somTD_ooxnumeric_somDefaultInit;
typedef void   SOMLINK somTP_ooxnumeric_somUninit(ooxnumeric *somSelf);
typedef somTP_ooxnumeric_somUninit *somTD_ooxnumeric_somUninit;
typedef void   SOMLINK somTP_ooxnumeric_somDestruct(ooxnumeric *somSelf, 
		octet doFree, 
		som3DestructCtrl* ctrl);
typedef somTP_ooxnumeric_somDestruct *somTD_ooxnumeric_somDestruct;
typedef void   SOMLINK somTP_ooxnumeric_somDefaultCopyInit(ooxnumeric *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ooxnumeric_somDefaultCopyInit *somTD_ooxnumeric_somDefaultCopyInit;
typedef ooxnumeric*   SOMLINK somTP_ooxnumeric_somDefaultAssign(ooxnumeric *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ooxnumeric_somDefaultAssign *somTD_ooxnumeric_somDefaultAssign;
typedef void   SOMLINK somTP_ooxnumeric_somDefaultConstCopyInit(ooxnumeric *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ooxnumeric_somDefaultConstCopyInit *somTD_ooxnumeric_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_ooxnumeric_somDefaultVCopyInit(ooxnumeric *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ooxnumeric_somDefaultVCopyInit *somTD_ooxnumeric_somDefaultVCopyInit;
typedef void   SOMLINK somTP_ooxnumeric_somDefaultConstVCopyInit(ooxnumeric *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ooxnumeric_somDefaultConstVCopyInit *somTD_ooxnumeric_somDefaultConstVCopyInit;
typedef ooxnumeric*   SOMLINK somTP_ooxnumeric_somDefaultConstAssign(ooxnumeric *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ooxnumeric_somDefaultConstAssign *somTD_ooxnumeric_somDefaultConstAssign;
typedef ooxnumeric*   SOMLINK somTP_ooxnumeric_somDefaultVAssign(ooxnumeric *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ooxnumeric_somDefaultVAssign *somTD_ooxnumeric_somDefaultVAssign;
typedef ooxnumeric*   SOMLINK somTP_ooxnumeric_somDefaultConstVAssign(ooxnumeric *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ooxnumeric_somDefaultConstVAssign *somTD_ooxnumeric_somDefaultConstVAssign;
typedef void   SOMLINK somTP_ooxnumeric_somInit(ooxnumeric *somSelf);
typedef somTP_ooxnumeric_somInit *somTD_ooxnumeric_somInit;
typedef void   SOMLINK somTP_ooxnumeric_somFree(ooxnumeric *somSelf);
typedef somTP_ooxnumeric_somFree *somTD_ooxnumeric_somFree;
typedef SOMClass*   SOMLINK somTP_ooxnumeric_somGetClass(ooxnumeric *somSelf);
typedef somTP_ooxnumeric_somGetClass *somTD_ooxnumeric_somGetClass;
typedef string   SOMLINK somTP_ooxnumeric_somGetClassName(ooxnumeric *somSelf);
typedef somTP_ooxnumeric_somGetClassName *somTD_ooxnumeric_somGetClassName;
typedef long   SOMLINK somTP_ooxnumeric_somGetSize(ooxnumeric *somSelf);
typedef somTP_ooxnumeric_somGetSize *somTD_ooxnumeric_somGetSize;
typedef boolean   SOMLINK somTP_ooxnumeric_somIsA(ooxnumeric *somSelf, 
		SOMClass* aClassObj);
typedef somTP_ooxnumeric_somIsA *somTD_ooxnumeric_somIsA;
typedef boolean   SOMLINK somTP_ooxnumeric_somIsInstanceOf(ooxnumeric *somSelf, 
		SOMClass* aClassObj);
typedef somTP_ooxnumeric_somIsInstanceOf *somTD_ooxnumeric_somIsInstanceOf;
typedef boolean   SOMLINK somTP_ooxnumeric_somRespondsTo(ooxnumeric *somSelf, 
		somId mId);
typedef somTP_ooxnumeric_somRespondsTo *somTD_ooxnumeric_somRespondsTo;
typedef boolean   SOMLINK somTP_ooxnumeric_somDispatch(ooxnumeric *somSelf, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_ooxnumeric_somDispatch *somTD_ooxnumeric_somDispatch;
typedef boolean   SOMLINK somTP_ooxnumeric_somClassDispatch(ooxnumeric *somSelf, 
		SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_ooxnumeric_somClassDispatch *somTD_ooxnumeric_somClassDispatch;
typedef boolean   SOMLINK somTP_ooxnumeric_somCastObj(ooxnumeric *somSelf, 
		SOMClass* cls);
typedef somTP_ooxnumeric_somCastObj *somTD_ooxnumeric_somCastObj;
typedef boolean   SOMLINK somTP_ooxnumeric_somResetObj(ooxnumeric *somSelf);
typedef somTP_ooxnumeric_somResetObj *somTD_ooxnumeric_somResetObj;
typedef void   SOMLINK somTP_ooxnumeric_somDispatchV(ooxnumeric *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_ooxnumeric_somDispatchV *somTD_ooxnumeric_somDispatchV;
typedef long   SOMLINK somTP_ooxnumeric_somDispatchL(ooxnumeric *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_ooxnumeric_somDispatchL *somTD_ooxnumeric_somDispatchL;
typedef void*   SOMLINK somTP_ooxnumeric_somDispatchA(ooxnumeric *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_ooxnumeric_somDispatchA *somTD_ooxnumeric_somDispatchA;
typedef double   SOMLINK somTP_ooxnumeric_somDispatchD(ooxnumeric *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_ooxnumeric_somDispatchD *somTD_ooxnumeric_somDispatchD;
typedef SOMObject*   SOMLINK somTP_ooxnumeric_somPrintSelf(ooxnumeric *somSelf);
typedef somTP_ooxnumeric_somPrintSelf *somTD_ooxnumeric_somPrintSelf;
typedef void   SOMLINK somTP_ooxnumeric_somDumpSelf(ooxnumeric *somSelf, 
		long level);
typedef somTP_ooxnumeric_somDumpSelf *somTD_ooxnumeric_somDumpSelf;
typedef void   SOMLINK somTP_ooxnumeric_somDumpSelfInt(ooxnumeric *somSelf, 
		long level);
typedef somTP_ooxnumeric_somDumpSelfInt *somTD_ooxnumeric_somDumpSelfInt;
}

#endif /* ooxnumeric_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for ooxnumeric
 */
class ooxnumeric : public ooxfield
{
public:

// ooxnumeric::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_ooxnumeric) ooxnumericNewClass(ooxnumeric_MajorVersion,ooxnumeric_MinorVersion);
   return (void*)
      SOM_Resolve(_ooxnumeric,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_ooxnumeric));
}

// ooxnumeric::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somFree)
         ((SOMObject*)obj);
   }
}

ooxnumeric& operator=(ooxnumeric& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

ooxnumeric()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ooxnumericCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

ooxnumeric(ooxnumeric* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ooxnumericCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

#ifdef __IBMCPP__
#pragma info(nocnv,nopar)
#endif
ooxnumeric(const ooxnumeric* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ooxnumericCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}
#ifdef __IBMCPP__
#pragma info(restore)
#endif

ooxnumeric(Environment *ev,string name,short length,short decimal) 
{
   define(ev,0,name,length,decimal);
}


/* initializer method: define */
void   define(Environment *ev, 
		somInitCtrl* ctrl, 
		string name, 
		short length, 
		short decimal)
{
   SOM_ResolveD(this,ooxnumeric,ooxnumeric,define)
	(this, ev,ctrl,name,length,decimal);
}


/* method: put_long */
void   put_long(Environment *ev, 
		long longv)
{
   SOM_ResolveD(this,ooxnumeric,ooxnumeric,put_long)
	(this, ev,longv);
}


/* method: put_float */
void   put_float(Environment *ev, 
		float floatv)
{
   SOM_ResolveD(this,ooxnumeric,ooxnumeric,put_float)
	(this, ev,floatv);
}


/* method: get_long */
long   get_long(Environment *ev)
{
   return SOM_ResolveD(this,ooxnumeric,ooxnumeric,get_long)
	(this, ev);
}


/* method: get_float */
float   get_float(Environment *ev)
{
   return SOM_ResolveD(this,ooxnumeric,ooxnumeric,get_float)
	(this, ev);
}


/*
 * Reintroduce inherited methods
 */

/* method: get_name */
string   get_name(Environment *ev)
{
   return SOM_ResolveD(this,ooxnumeric,ooxfield,get_name)
	(this, ev);
}


/* method: get */
string   get(Environment *ev)
{
   return SOM_ResolveD(this,ooxnumeric,ooxfield,get)
	(this, ev);
}


/* method: put */
long   put(Environment *ev, 
		string datum)
{
   return SOM_ResolveD(this,ooxnumeric,ooxfield,put)
	(this, ev,datum);
}


/* method: get_type */
char   get_type(Environment *ev)
{
   return SOM_ResolveD(this,ooxnumeric,ooxfield,get_type)
	(this, ev);
}


/* method: get_length */
short   get_length(Environment *ev)
{
   return SOM_ResolveD(this,ooxnumeric,ooxfield,get_length)
	(this, ev);
}


/* method: get_dec_point */
short   get_dec_point(Environment *ev)
{
   return SOM_ResolveD(this,ooxnumeric,ooxfield,get_dec_point)
	(this, ev);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(som3InitCtrl* ctrl)
{
   SOM_ResolveD(this,ooxnumeric,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,ooxnumeric,SOMObject,somUninit)
	(this);
}


/* method: somDestruct */
void   somDestruct(octet doFree, 
		som3DestructCtrl* ctrl)
{
/*
 *  The default destructor for a SOM object. A nonzero <doFree>
 *  indicates that the object storage should be freed by the
 *  object's class (via somDeallocate) after uninitialization.
 *  As with somDefaultInit, a null ctrl can be passed.
 */
   SOM_ResolveD(this,ooxnumeric,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor. Use this to make copies of objects for
 *  calling methods with "by-value" argument semantics.
 */
   SOM_ResolveD(this,ooxnumeric,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
ooxnumeric*  somDefaultAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator. Use this to "assign" the state of one
 *  object to another.
 */
   return SOM_ResolveD(this,ooxnumeric,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const fromObj.
 */
   SOM_ResolveD(this,ooxnumeric,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a volatile fromObj.
 */
   SOM_ResolveD(this,ooxnumeric,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const volatile fromObj.
 */
   SOM_ResolveD(this,ooxnumeric,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
ooxnumeric*  somDefaultConstAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const fromObj.
 */
   return SOM_ResolveD(this,ooxnumeric,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
ooxnumeric*  somDefaultVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a volatile fromObj.
 */
   return SOM_ResolveD(this,ooxnumeric,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
ooxnumeric*  somDefaultConstVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const volatile fromObj.
 */
   return SOM_ResolveD(this,ooxnumeric,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somInit */
void   somInit()
{
/*
 *  Obsolete but still supported. Override somDefaultInit instead of somInit.
 */
   SOM_ResolveD(this,ooxnumeric,SOMObject,somInit)
	(this);
}


/* method: somFree */
void   somFree()
{
/*
 *  Use as directed by framework implementations.
 */
   SOM_ResolveD(this,ooxnumeric,SOMObject,somFree)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,ooxnumeric,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
/*
 *  Return the name of the receiver's class.
 */
   return SOM_ResolveD(this,ooxnumeric,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
/*
 *  Return the size of the receiver.
 */
   return SOM_ResolveD(this,ooxnumeric,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver responds to methods
 *  introduced by <aClassObj>, and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,ooxnumeric,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver is an instance of
 *  <aClassObj> and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,ooxnumeric,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
/*
 *  Returns 1 (true) if the indicated method can be invoked
 *  on the receiver and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,ooxnumeric,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */

/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
/* the va_list invocation form */
boolean   ooxnumeric_somDispatch(somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,ooxnumeric,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,ooxnumeric,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */

/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
/* the va_list invocation form */
boolean   ooxnumeric_somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,ooxnumeric,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,ooxnumeric,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
/*
 *  cast the receiving object to cls (which must be an ancestor of the
 *  objects true class. Returns true on success.
 */
   return SOM_ResolveD(this,ooxnumeric,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
/*
 *  reset an object to its true class. Returns true always.
 */
   return SOM_ResolveD(this,ooxnumeric,SOMObject,somResetObj)
	(this);
}


/* va_list method: somDispatchV */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void   ooxnumeric_somDispatchV(somId methodId, 
		somId descriptor, 
		va_list ap)
{   SOM_ResolveD(this,ooxnumeric,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void   somDispatchV(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   SOM_ResolveD(this,ooxnumeric,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
   va_end(ap);
}


/* va_list method: somDispatchL */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
long   ooxnumeric_somDispatchL(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,ooxnumeric,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
long   somDispatchL(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   long __somResult = 
      SOM_ResolveD(this,ooxnumeric,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchA */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void*   ooxnumeric_somDispatchA(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,ooxnumeric,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void*   somDispatchA(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   void* __somResult = 
      SOM_ResolveD(this,ooxnumeric,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchD */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
double   ooxnumeric_somDispatchD(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,ooxnumeric,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
double   somDispatchD(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   double __somResult = 
      SOM_ResolveD(this,ooxnumeric,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
/*
 *  Uses <SOMOutCharRoutine> to write a brief string with identifying
 *  information about this object.  The default implementation just gives
 *  the object's class name and its address in memory.
 *  <self> is returned.
 */
   return SOM_ResolveD(this,ooxnumeric,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write a detailed description of this object
 *  and its current state.
 * 
 *  <level> indicates the nesting level for describing compound objects
 *  it must be greater than or equal to zero.  All lines in the
 *  description will be preceeded by <2*level> spaces.
 * 
 *  This routine only actually writes the data that concerns the object
 *  as a whole, such as class, and uses <somDumpSelfInt> to describe
 *  the object's current state.  This approach allows readable
 *  descriptions of compound objects to be constructed.
 * 
 *  Generally it is not necessary to override this method, if it is
 *  overriden it generally must be completely replaced.
 */
   SOM_ResolveD(this,ooxnumeric,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write in the current state of this object.
 *  Generally this method will need to be overridden.  When overriding
 *  it, begin by calling the parent class form of this method and then
 *  write in a description of your class's instance data. This will
 *  result in a description of all the object's instance data going
 *  from its root ancestor class to its specific class.
 */
   SOM_ResolveD(this,ooxnumeric,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* ooxnumeric */



#endif       /* SOM_ooxnumeric_xh */
